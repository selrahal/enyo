package org.salemelrahal.enyo.attack;

import bothack.actions.Actions;
import org.salemelrahal.enyo.action.monster.Attack;
import org.salemelrahal.enyo.action.Wait;
import org.salemelrahal.enyo.action.monster.Throw;
import org.salemelrahal.enyo.action.monster.MoveTowardsEnemy;
import org.salemelrahal.enyo.action.monster.TargetEnemyAction;
import org.salemelrahal.enyo.enemy.Enemy;
import bothack.bot.IGame;
import bothack.bot.Hunger;
import bothack.bot.Direction;
import bothack.bot.monsters.IMonster;
import bothack.bot.Position;
import org.salemelrahal.enyo.util.MapUtil;
import org.salemelrahal.enyo.state.OnElbereth;
import org.salemelrahal.enyo.state.OnEngravableTile;
import org.salemelrahal.enyo.item.ItemInInventory;
import org.salemelrahal.enyo.fact.PathToAdvantageousTile;
import org.salemelrahal.enyo.item.RangedWeapon;

global org.slf4j.Logger logger;


rule "Deal with stronger enemies first"
when
	$stronger : TargetEnemyAction($difficulty : target.getDifficulty())
	$weaker : TargetEnemyAction(target.getDifficulty() < $difficulty)
then
	delete($weaker);
end

rule "Deal with stronger enemies first, closer enemies second"
when
	$closer : TargetEnemyAction($difficulty : target.getDifficulty(), $distance : target.getDistance())
	$farther  : TargetEnemyAction(target.getDifficulty() == $difficulty, target.getDistance() > $distance)
then
	delete($farther);
end

rule "Deal with equivalently strong and close enemies at random"
when
	$first : TargetEnemyAction($difficulty : target.getDifficulty(), $distance : target.getDistance())
	$second  : TargetEnemyAction(target.getDifficulty() == $difficulty, target.getDistance() == $distance, this != $first)
then
	delete($second);
end