package org.salemelrahal.enyo.attack;

import org.salemelrahal.enyo.action.Engrave;
import org.salemelrahal.enyo.enemy.Enemy;
import bothack.bot.IGame;
import bothack.bot.Hunger;
import bothack.bot.Direction;
import bothack.bot.monsters.IMonster;
import bothack.bot.Position;
import org.salemelrahal.enyo.util.MapUtil;
import org.salemelrahal.enyo.state.OnElbereth;
import org.salemelrahal.enyo.state.OnEngravableTile;
import org.salemelrahal.enyo.item.ItemInInventory;
import org.salemelrahal.enyo.fact.PathToAdvantageousTile;

global org.slf4j.Logger logger;

rule "Engrave with finger proactively when about to fact many enemies" 
when
	$first : Enemy(isAwake(), respectsElbereth())
	Enemy(isAwake(), respectsElbereth(),this != $first)
	not OnElbereth()
	OnEngravableTile()
	IGame(canEngrave())
	not ItemInInventory($slot : slot, item.name().contains("wand of fire"))
then
	insertLogical(new Engrave('-', "Elbereth"));
end


rule "Engrave with WoF proactively when about to fact many enemies" 
when
	$first : Enemy(isAwake(), respectsElbereth())
	Enemy(isAwake(), respectsElbereth(),this != $first)
	not OnElbereth()
	OnEngravableTile()
	IGame(canEngrave())
	ItemInInventory($slot : slot, item.name().contains("wand of fire"))
then
	insertLogical(new Engrave($slot, "Elbereth"));
end

rule "Engraves with the same slot and text are identical" //Use truth evaluation here?
when
	Engrave($slot : slot, $message : message)
	$second : Engrave(slot == $slot, message == $message)
then
	delete($second);
end