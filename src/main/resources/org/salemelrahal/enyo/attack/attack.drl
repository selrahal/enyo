package org.salemelrahal.enyo.attack;

import bothack.actions.Actions;
import org.salemelrahal.enyo.action.monster.Attack;
import org.salemelrahal.enyo.action.Wait;
import org.salemelrahal.enyo.action.monster.Throw;
import org.salemelrahal.enyo.action.monster.MoveTowardsEnemy;
import org.salemelrahal.enyo.enemy.Enemy;
import bothack.bot.IGame;
import bothack.bot.Hunger;
import bothack.bot.Direction;
import bothack.bot.monsters.IMonster;
import bothack.bot.Position;
import org.salemelrahal.enyo.util.MapUtil;
import org.salemelrahal.enyo.state.OnElbereth;
import org.salemelrahal.enyo.state.OnEngravableTile;
import org.salemelrahal.enyo.item.ItemInInventory;
import org.salemelrahal.enyo.fact.PathToAdvantageousTile;
import org.salemelrahal.enyo.item.RangedWeapon;

global org.slf4j.Logger logger;

rule "Melee attack adjacent target enemy"
when
	$enemy : Enemy(isMarked(), isAdjacent())
then
	insertLogical(new Attack($enemy));
end

rule "Range attack target enemy"
when
	$enemy : Enemy(isRangeMarked())
	RangedWeapon($slot : slot)
then
	insertLogical(new Throw($slot, $enemy));
end

rule "Always attack instead of waiting"
when
	Attack()
	$wait : Wait()
then
	delete($wait);
end

rule "Always attack instead of moving" //maybe we should take the monster's difficulty into account?
when
	Attack()
	$move : MoveTowardsEnemy()
then
	delete($move);
end

rule "Always attack the stronger monster?" //maybe we should take the monster's difficulty into account?
when
	Attack($difficulty : target.getDifficulty())
	$weaker : Attack(target.getDifficulty() < $difficulty)
then
	delete($weaker);
end

rule "Attack at random between like monster?DEBUG" //maybe we should take the monster's difficulty into account?
when
	$first : Attack($difficulty : target.getDifficulty())
	$second : Attack(target.getDifficulty() == $difficulty, this != $first)
then
	logger.info("$first:" + $first);
	logger.info("$second:" + $second);
end

rule "Attack at random between like monster?" //maybe we should take the monster's difficulty into account?
when
	$first : Attack($difficulty : target.getDifficulty())
	$second : Attack(target.getDifficulty() == $difficulty, this != $first)
then
	delete($second);
end
