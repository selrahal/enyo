package org.salemelrahal.enyo.hunger;

import bothack.actions.Actions;
import bothack.actions.ActionsComplex;
import bothack.bot.IGame;
import bothack.bot.items.IItem;
import bothack.bot.Hunger;
import java.util.Map.Entry;
import org.salemelrahal.enyo.item.ItemInInventory;
import org.salemelrahal.enyo.item.ItemOnTile;
import org.salemelrahal.enyo.state.InShop;
import org.salemelrahal.enyo.action.Pray;
import org.salemelrahal.enyo.action.Eat;
import org.salemelrahal.enyo.action.MoveTowardsEnemy;
import org.salemelrahal.enyo.action.PickUpItem;


global org.slf4j.Logger logger;

rule "Eat food in inventory when weak"
when
	$game : IGame($player : player, player.hunger() == Hunger.WEAK)
	ItemInInventory($slot : slot, $item : item, $player.canEat(item), !item.name().contains("tin"))
then
	insert(new Eat($slot));
end

rule "Pray when fainting"
when
	IGame(player.hunger() == Hunger.FAINTING, canPray())
then
	insert(new Pray());
end

rule "Eat food outside of a shop"
when
	IGame($player : player, player.hunger() != Hunger.SATIATED)
	ItemOnTile($corpse : item, $player.canEat(item), !item.isCorpse(), item.name() != "tin") //refactor this corpse logic, and tin logic
	not InShop()
then
	insert(new Eat($corpse));
end


rule "Eat fresh corpse outside of a shop"
when
	$game : IGame($player : player, player.hunger() != Hunger.SATIATED, $tile : currentLevel.at(player))
	ItemOnTile($corpse : item, $player.canEat(item), item.isCorpse(), $game.isCorpseFresh($tile, item)) //refactor this corpse logic
	not InShop()
then
	insert(new Eat($corpse));
end

rule "Eating is more important than picking up an item"
when
	Eat()
	pickup: PickUpItem()
then
	delete(pickup);
end

rule "Defer eating when attacking"
when
	IGame(player.hunger() != Hunger.WEAK) 
	eat : Eat()
	MoveTowardsEnemy()
then
	delete(eat);
end

rule "Eats are identical (for now)"
when
	first : Eat()
	second : Eat(second != first)
then
	delete(second);
end